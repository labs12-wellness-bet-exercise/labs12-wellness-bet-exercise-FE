{"version":3,"sources":["serviceWorker.js","components/Navigation/index.js","constants/routes.js","components/Landing/index.js","components/SignUp/index.js","components/SignIn/index.js","components/PasswordForget/index.js","components/AdminGroupDash/index.js","components/Home/index.js","components/App/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Navigation","react_default","a","createElement","react_router_dom","to","LandingPage","App","SignIn","AdminDash","Home","state","_this2","this","axios","get","then","res","setState","users","data","catch","err","console","log","map","user","Fragment","full_name","src","profilePhoto","alt","React","Component","components_Navigation","react_router","exact","path","component","SignUpPage","SignInPage","PasswordForgetPage","AdminPage","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,oHCSSC,EAtBI,kBACjBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GCPS,WDOf,YAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GCZS,KDYf,YAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GCZM,SDYZ,SAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GCdO,UDcb,aEVOC,EANK,kBAClBL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BCIWI,EANH,kBACVN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mBCIWK,EANA,kBACbP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBCIWI,EANH,kBACVN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mBCIWM,EANG,kBAChBR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2CCqCWO,6MArCbC,MAAO,sFAIa,IAAAC,EAAAC,KAClBC,IACGC,IAAI,mCACJC,KAAK,SAAAC,GACJL,EAAKM,SAAS,CACZC,MAAOF,EAAIG,SAGdC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,sCAKjB,OACErB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBACCU,KAAKF,MAAMQ,MACVN,KAAKF,MAAMQ,MAAMM,IAAI,SAAAC,GACnB,OACEzB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyB,SAAA,KACE1B,EAAAC,EAAAC,cAAA,UAAKuB,EAAKE,WACV3B,EAAAC,EAAAC,cAAA,OAAK0B,IAAKH,EAAKI,aAAcC,IAAI,mBAElC9B,EAAAC,EAAAC,cAAA,qCA7BK6B,IAAMC,WC+BV1B,mLApBX,OACEN,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+B,EAAD,MAEAjC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,OAAK,EAACC,KPpBA,IOoBsBC,UAAWhC,IAC9CL,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOE,KPlBG,QOkBgBC,UAAW5B,IACrCT,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOE,KPrBM,UOqBgBC,UAAWC,IACxCtC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOE,KPrBM,UOqBgBC,UAAWE,IACxCvC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOE,KPnBc,aOmBgBC,UAAWG,IAChDxC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOE,KPrBI,SOqBgBC,UAAWI,aAb9BV,IAAMC,WCJxBU,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SVyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.0ed6da5a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n// import SignOutButton from '../SignOut';\r\nimport * as ROUTES from '../../constants/routes';\r\n\r\nconst Navigation = () => (\r\n  <div>\r\n    <ul>\r\n      <li>\r\n        <Link to={ROUTES.SIGN_IN}>Sign In</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.LANDING}>Landing</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.HOME}>Home</Link>\r\n      </li>\r\n      <li>\r\n        <Link to={ROUTES.ADMIN}>Admin</Link>\r\n      </li>\r\n      {/* <li>\r\n        <SignOutButton />\r\n      </li> */}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default Navigation;","export const LANDING = '/';\r\nexport const SIGN_UP = '/signup';\r\nexport const SIGN_IN = '/signin';\r\nexport const HOME = '/home';\r\nexport const ADMIN = '/admin';\r\nexport const PASSWORD_FORGET = '/pw-forget';","import React from \"react\";\r\n\r\nconst LandingPage = () => (\r\n  <div>\r\n    <h1>Landing Page</h1>\r\n  </div>\r\n);\r\n\r\nexport default LandingPage;\r\n","import React from \"react\";\r\n\r\nconst App = () => (\r\n  <div>\r\n    <h1>App</h1>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from \"react\";\r\n\r\nconst SignIn = () => (\r\n  <div>\r\n    <h1>Sign In</h1>\r\n  </div>\r\n);\r\n\r\nexport default SignIn;\r\n","import React from \"react\";\r\n\r\nconst App = () => (\r\n  <div>\r\n    <h1>App</h1>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from \"react\";\r\n\r\nconst AdminDash = () => (\r\n  <div>\r\n    <h1>Admin Dash</h1>\r\n  </div>\r\n);\r\n\r\nexport default AdminDash;\r\n","import React from \"react\";\r\nimport axios from 'axios';\r\n\r\nclass Home extends React.Component {\r\n  state= {\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get('http://localhost:5000/api/users')\r\n      .then(res => {\r\n        this.setState({\r\n          users: res.data\r\n        })\r\n      })\r\n      .catch(err =>{\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n render(){\r\n   return(\r\n     <div>\r\n       <h1>Home</h1>\r\n       {this.state.users ?\r\n         this.state.users.map(user => {\r\n           return (\r\n             <>\r\n               <h3>{user.full_name}</h3>\r\n               <img src={user.profilePhoto} alt='user avatar'/>\r\n             </>\r\n         )}): <p>Loading users...</p>\r\n       }\r\n     </div>\r\n   )\r\n }\r\n}\r\n \r\n\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport * as ROUTES from '../../constants/routes';\r\nimport Navigation from '../Navigation';\r\nimport LandingPage from '../Landing';\r\nimport SignUpPage from '../SignUp';\r\nimport SignInPage from '../SignIn';\r\nimport PasswordForgetPage from '../PasswordForget';\r\nimport AdminPage from '../AdminGroupDash';\r\nimport Home from '../Home'\r\n\r\n\r\nclass App extends React.Component {\r\n  render(){\r\n    return(\r\n      <Router>\r\n        <div>\r\n          <Navigation />\r\n\r\n          <hr />\r\n          <Route exact path={ROUTES.LANDING} component={LandingPage} />\r\n          <Route path={ROUTES.HOME} component={Home} />\r\n          <Route path={ROUTES.SIGN_UP} component={SignUpPage} />\r\n          <Route path={ROUTES.SIGN_IN} component={SignInPage} />\r\n          <Route path={ROUTES.PASSWORD_FORGET} component={PasswordForgetPage} />\r\n          <Route path={ROUTES.ADMIN} component={AdminPage} />\r\n        </div>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n  \r\n  \r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}